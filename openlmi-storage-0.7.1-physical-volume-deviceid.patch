commit a076f025710a1feab70fc7f36f7c90df83f36d20
Author: Jan Safranek <jsafrane@redhat.com>
Date:   Tue Mar 4 16:44:55 2014 +0100

    Don't use lvm-pv-uuid- for StorageExtent.DeviceID
    
    lvm2-2.02.105-9.el7 has introduced new /dev/disk/by-id/lvm-pv-uuid-XYZ symlink,
    which points to a physical volume. This symlink cannot be used as stable device
    name, as it changes when PV metadata are added/removed to/from the device.
    
    Therefore we should avoid such DeviceID.

diff --git a/src/lmi/storage/util/storage.py b/src/lmi/storage/util/storage.py
index 98068b6..ff6da1b 100644
--- a/src/lmi/storage/util/storage.py
+++ b/src/lmi/storage/util/storage.py
@@ -207,35 +207,49 @@ def log_storage_call(msg, args):
 @cmpi_logging.trace_function
 def get_persistent_name(device):
     """
-    Return stable device name of given device.
+    Return stable device name of given device. This name should not change
+    across reboots and change of data on the device.
 
     Current order of significance: by-id, by-partuuid, by-path, by-uuid, /dev
 
     :param device: (``StorageDevice``) The device.
     :returns: ``string``
     """
-    links = device.deviceLinks
-
+    # We inspect udev symlinks in this order and return the nicest
     prefixes = ["/dev/disk/by-id/", "/dev/disk/by-partuuid/",
             "/dev/disk/by-path/", "/dev/disk/by-uuid/"]
 
+    # Ignore any symlink with these prefixes.
+    # 'lvm-pv-uuid' symlink is ID of the _data_ on the device and appears after
+    # pvcreate and disappears after pvremove -> not stable
+    blacklist = ["/dev/disk/by-id/lvm-pv-uuid-"]
+
     # use by-path for iscsi LUNs, they get the same by-id link
-    # if one is imported several times (e.g. for mulitpath)
+    # if one is imported several times (e.g. for multipath)
     if device.type == "iscsi":
         prefixes = ["/dev/disk/by-path/", "/dev/disk/by-id/",
                 "/dev/disk/by-partuuid/", "/dev/disk/by-uuid/"]
 
     found = False
-    # Find a symlink which matches the topmost prefix"
+    links = device.deviceLinks
+    # Find a symlink which matches the topmost prefix and is not blacklisted
     for prefix in prefixes:
         for link in links:
             if link.startswith(prefix):
-                found = True
-                break
+                blacklisted = False
+                for b in blacklist:
+                    if link.startswith(b):
+                        blacklisted = True
+                        break
+                if not blacklisted:
+                    found = True
+                    break
         if found:
             break
     if found:
         return link
+
+    # We did not find any 'nice' udev symlink, use directly '/dev/sda'-like one.
     return device.path
 
 @cmpi_logging.trace_function
